#!/bin/bash
#
# Copyright (c) 2017 TimothÃ©e Feuillet
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

prig_file="$(pwd)/$0"
launch_cwd="$(pwd)"
prig_directory="$(pwd)"

# print and die
function die # (code, message...)
{
  code=$1
  shift
  echo 1>&2 ${command_verb:-[core]}: "$@"
  exit $code
  exit 1
}
function diecv # (message...)
{
  die 1 "$@"
}

function debug_log # (message...)
{
  (( VERBOSE )) && echo ' DD ' ${command_verb:-[core]}: "$@"
}
function log # (message...)
{
  echo ' -- ' ${command_verb:-[core]}: "$@"
}

gbl_opt_log="./prig.log"

function __log_cmd
{
  echo -e '\n------------------------------------------------------------------------------\n'"$@":'\n'
  "$@"
  cmd_exit_code=$?
  [ -z "$cmd_exit_code" ] && cmd_exit_code=512
  echo -e '\n-- exited with code:' $cmd_exit_code
}
function log_cmd # (cmd, args...)
{
  debug_log executing: "$@"

  (( VERBOSE )) && __log_cmd "$@" 1>>"$gbl_opt_log" 2>&1
  (( VERBOSE )) || __log_cmd "$@" &>>"$gbl_opt_log"

  (( $cmd_exit_code != 0 )) && debug_log '           '"$(printf "%${#1}s" | tr ' ' '^' )"' command exited with code' $cmd_exit_code
  return $cmd_exit_code
}

# tee-without-subshell/pipe/forking the command
function tee_cmd # (cmd, args...)
{
  debug_log executing: "$@"

  echo -e '\n------------------------------------------------------------------------------\n'"$@":'\n' 1>>"$gbl_opt_log" 2>&1

  (( VERBOSE )) || "$@" > >(tee -a "$gbl_opt_log") 2>>"$gbl_opt_log"
  (( VERBOSE )) && "$@" > >(tee -a "$gbl_opt_log") 2>&1
  cmd_exit_code=$?
  [ -z "$cmd_exit_code" ] && cmd_exit_code=512
  echo -e '\n-- exited with code:' $cmd_exit_code 1>>"$gbl_opt_log" 2>&1

  (( $cmd_exit_code != 0 )) && debug_log '           '"$(printf "%${#1}s" | tr ' ' '^' )"' command exited with code' $cmd_exit_code
  return $cmd_exit_code
}

##
##  ENV CHECKS
##



function has # (command)
{
  hash "$1" &>/dev/null
}

function cmdcheck # (command)
{
  debug_log "checking for '$1'..."
  has "$1" || die 2 "command not found: '$1' is required by prig"
}

# check for required builtins
cmdcheck typeset
cmdcheck declare
cmdcheck compgen

# check for required commands
cmdcheck cat
cmdcheck cut
cmdcheck git
cmdcheck grep
cmdcheck head
cmdcheck mkdir
cmdcheck realpath
cmdcheck rm
cmdcheck rmdir
cmdcheck sed
cmdcheck tail
cmdcheck tr

# check for alternatives (curl / wget, ...)
has wget && has_wget=true || has_wget=false
has wget && has_curl=true || has_curl=false
debug_log "has wget: ${has_wget}, has curl: ${has_curl}"



##
##  SETUP VARS FOR PRIG
##

# global options definition
gbl_opt_skip_unknown=false
help_gbl_opt_skip_unknown="Do not generate an error when a flag is not recognized"

gbl_opt_clear_logs=true
help_gbl_opt_skip_unknown="Clear the log file when starting prig"

gbl_opt_log="./prig.log"
help_gbl_opt_log="The log file where output of commands are written"

gbl_opt_force_curl=false
help_gbl_opt_force_curl="Force the usage of curl when both wget and curl are available"

gbl_opt_prig_command_dir="./scripts/prig/"
help_gbl_opt_prig_command_dir="Indicate the folder that hold the external prig commands"

gbl_opt_prig_repo="https://github.com/tim42/prig.git"
help_gbl_opt_prig_repo="The git repository of prig. Prig and its commands will be checked out from there."

gbl_opt_prig_branch="master"
help_gbl_opt_prig_branch="The branch of the git repository of prig."


# command option definition
cmd_opt_init_force=false
help_cmd_opt_init_force="Force initialization, even if prig is already present. (this won't remove the old prig installation if paths are different)."
noconf_cmd_opt_init_force=

cmd_opt_init_git_template=
help_cmd_opt_init_git_template="The git template directory, as specified by git init --template=... ."
noconf_cmd_opt_init_git_templatee=


# conf var definition (prefixed by conf_)
conf_project_name=
help_conf_project_name="The project name"

conf_project_generator=""
help_conf_project_generator="List of space-separated generator names (you will need to have a conf_generator_{name}_url and a conf_generator_{name}_branch variable) that will serve as project generators. (order is important)."

# load options for external commands. We need to load the config file at least once so that we have $gbl_opt_prig_command_dir set
# then we will reload the configuration so that variables defined in that configuration will overwrite commands variables
if [ -f ./.prigrc ]
then
  debug_log 'loading config file...' 
  log_cmd . ./.prigrc
elif [ -f ~/.prigrc ]
then
  debug_log 'loading global config file...' 
  log_cmd . ~/.prigrc
fi
ext_command_options="$(compgen -A file "$gbl_opt_prig_command_dir/cmd/cmd_opt_")"
for cmd_opt in $ext_command_options
do
  log_cmd . "$cmd_opt"
done



# load the prig.conf file
if [ -f ./.prigrc ]
then
  debug_log 'loading config file...' 
  log_cmd . ./.prigrc
elif [ -f ~/.prigrc ]
then
  debug_log 'loading global config file...' 
  log_cmd . ~/.prigrc
fi



##
##  UTILITY FUNCTIONS FOR PRIG
##


function var_exists # (var-name)
{
  typeset -p $1 &>/dev/null
}

function is_valid_submodule # (path, expected-url)
{
  [ ! -d "$1" ] && return 0

  rpath="$(realpath "$1" --relative-to=.)"
  repos="$(git submodule foreach 'echo -n "[$path#" 1>&2 ; git remote get-url origin | tr \\n ] 1>&2 ; echo 1>&2' 2>&1 1>/dev/null  | grep -F "[$rpath#$2]")"

  if [ "${2:0:7}" = 'file://' ]
  then
    [ ! -z "$repos" ] && return 1
  else
    [ -z "$repos" ] && return 1

    [ "$(git -C "$1" remote get-url origin)" != "$2" ] && return 1
  fi

  return 0
}


function submodule_or_cp # (url, local_path [, branch])
{
  # check if the local path has the correct type
  if [ -d "$2" ]
  then
    if ! is_valid_submodule "$2" "$1"
    then
      log "Wrong submodule, removing $2"
      log_cmd git rm -r --force -- "$2"
      log_cmd rm -rf -- "$2"
      log_cmd rm -rf "$(git rev-parse --git-dir)/modules/$2/"
    elif [ "${1:0:7}" != 'file://' ]
    then
      return
    fi
  fi

  # perform the submodule or the cp operation
  if [ "${1:0:7}" = 'file://' ]
  then
    log "copying $1 -> $2..."
    log_cmd mkdir -p -- "$2"
    log_cmd cp -Rv "${1:7}"/* "$2"
  else
    branch="${3:-master}"
    log "adding submodule $1 ($branch) -> $2..."
    log_cmd mkdir -p "$2"
    log_cmd rmdir "$2"
    log_cmd git submodule add -b "$branch" --name "$2#$3" --force -- "$1" "$2"
  fi
}

function update_submodule # (url, local_path [, branch])
{
  [ ! -d "$2" ] && { submodule_or_cp "$@" ; return $? ; }
  is_valid_submodule "$2" "$1" || { submodule_or_cp "$@" ; return $? ; }
  if [ "${1:0:7}" = 'file://' ]
  then
    log_cmd git rm -r --force -- "$2"
    log_cmd rm -rf "$2"
    submodule_or_cp "$@"
    return $?
  fi

  log "updating $2 [$3]..."

  log_cmd pushd "$2" || diecv "unable to change the directory to $2"
  log_cmd git checkout -- "$3"
  log_cmd git pull --rebase || diecv "unable to pull changes from the prig repository (check the logs)"
  log_cmd popd
}

##
##  PRIG BUILTIN COMMANDS
##



help_prig_cmd_init="Initialize prig in the current directory or the specified directory"
usage_prig_cmd_init="project-name [opt-project-directory]"
function prig_cmd_init # (project-name, project-directory='./')
{
  (( $# == 0 )) && diecv "missing project name. See help for more information."
  conf_project_name="$1"
  (( $# == 2 )) && project_directory="$2" || project_directory="."

  debug_log "project-name: '$conf_project_name'"
  debug_log "project-dir:  '$project_directory'"

  [ "$project_directory" != "." ] && log_cmd mkdir -p "$project_directory"
  log_cmd pushd "$project_directory"

  # as we pushd to the project directory, we change the prig_directory to the
  # new current one
  prig_directory="$(pwd)"

  # .prigrc generation
  if [ ! -f "./.prigrc" ] || [ "$cmd_opt_init_force" = "true" ]
  then
    log "generating a '.prigrc' file..."
    log_cmd rm -f "./.prigrc"

    echo -n >"./.prigrc"
    cat <<EOF >>"./.prigrc"
##
## prig configuration file
##  generated on $(has date && date || echo -n '[unknown]')
##

##
## PRIG CONF VARS
##

EOF
    var_list="$(compgen -A variable "conf_")"
    for var in $var_list
    do
      help_var="help_$var"
      echo "# ${!help_var}" >>"./.prigrc"
      echo "$var='${!var}'" >>"./.prigrc"
      echo >>"./.prigrc"
    done

    cat <<EOF >>"./.prigrc"

##
## PRIG GLOBAL OPTIONS
##

EOF

    var_list="$(compgen -A variable "gbl_opt_")"
    for var in $var_list
    do
      var_exists "noconf_$var" && continue

      help_var="help_$var"
      echo "# ${!help_var}" >>"./.prigrc"
      echo "$var='${!var}'" >>"./.prigrc"
      echo >>"./.prigrc"
    done

    cat <<EOF >>"./.prigrc"

##
## PRIG COMMAND OPTIONS
##

EOF
    var_list="$(compgen -A variable "cmd_opt_")"
    for var in $var_list
    do
      var_exists "noconf_$var" && continue

      help_var="help_$var"
      echo "# ${!help_var}" >>"./.prigrc"
      echo "$var='${!var}'" >>"./.prigrc"
      echo >>"./.prigrc"
    done
  fi

  # check that the current directory is a git repo, else create one
  if [ ! -d .git ] || ! git rev-parse --git-dir &>/dev/null || [ "$cmd_opt_init_force" = "true" ]
  then
    debug_log "generating a git repo..."
    if [ ! -z "$cmd_opt_init_git_template" ]
    then
      log_cmd git init --template="$cmd_opt_init_git_template" .
    else
      log_cmd git init .
    fi
  else
    # save the state of the repository
    log_cmd git stash save -a 'pre-prig-init-'$(date +%s)

    # check if a prig submodule doesn't already exists
    prig_repos="$(git submodule foreach 'echo -n "$path#" 1>&2 ; git remote get-url origin | tr \\n \\# 1>&2 ; echo -n "$name" 1>&2' 2>&1 1>/dev/null  | grep -F "$(echo -e "$gbl_opt_prig_repo\\nprig-submodule")")"

    if [ ! -z "$prig_repos" ]
    then
      # remove those repositories
      while read -r repo
      do
        path="$(cut -d'#' -f1 <<<"$repo")"
        log "removing submodule in '$path'..."

        log_cmd git rm -r --force "$path"
      done <<<"$prig_repos"
      log_cmd git commit -am "[prig]: remove old prig submodules" &>/dev/null
    fi
  fi

  log_cmd git rm -r --force "$gbl_opt_prig_command_dir"
  log_cmd rm -rf "$gbl_opt_prig_command_dir"
  log_cmd rm -rf "$(git rev-parse --git-dir)/modules/prig-submodule/"

  # allow a local copy of prig, very useful for testing
  submodule_or_cp "$gbl_opt_prig_repo" "$gbl_opt_prig_command_dir" "$gbl_opt_prig_branch"

  # copy prig in the project root folder
  debug_log "checking for a 'prig' file..."
  [ -f "./prig" ] && cmp "./prig" "$gbl_opt_prig_command_dir/prig" &>/dev/null || log_cmd cp -v "$gbl_opt_prig_command_dir/prig" .

  log_cmd git add .prigrc prig "$gbl_opt_prig_command_dir"
  log_cmd git commit -am "[prig]: add prig" &>/dev/null

  log "(re) generating the project with a './prig apply'..."

  # give the execution to the newly installed prig
  exec ./prig --no-clear-logs apply
}

# the help command
usage_prig_cmd_help="[opt-command-verb]"
help_prig_cmd_help="Print help of another command verb / list command verbs"
function prig_cmd_help # (command_verb?)
{
  if (( $# == 0 ))
  then
    # list everything
    echo 'listing all available commands:'

    # builtins
    builtin_commands="$(compgen -A function "prig_cmd_")"
    for cmd in $builtin_commands
    do
      echo '-------------------------------------------------------------------------------'
      cmd="${cmd:9}"
      cmd_help_print_options "$cmd"
    done

    # external commands
    ext_commands="$(compgen -A file "$gbl_opt_prig_command_dir/cmd/cmd_opt_")"
    for cmd in $ext_commands
    do
      echo '-------------------------------------------------------------------------------'
      file="$cmd"
      cmd="${cmd##*/}"
      cmd="${cmd:8}"
      cmd_help_print_options "$cmd"
    done
  else
    # list just one
    if ! has prig_cmd_"$1"
    then
      # try to load it
      cmd_opt_path="$gbl_opt_prig_command_dir/cmd/cmd_opt_$1"
      debug_log "$1 is not an internal command: trying to load its options from $cmd_opt_path"
      [ -e "$cmd_opt_path" ] && . "$cmd_opt_path" || diecv "Unable to find command '$1'"
    fi

    cmd_help_print_options "$1"
  fi
}
function cmd_help_print_options # (command_verb)
{
    echo "$1:"

    # print help message (if it exists)
    help_var="help_prig_cmd_$1"
    var_exists "$help_var" && echo "${!help_var}" && echo


    help_var_list="$(compgen -A variable "cmd_opt_$1")"
    help_fnc_list="$(compgen -A function "cmd_opt_$1")"

    # print usage (if it exists)
    usage_var="usage_prig_cmd_$1"

    if [ -z "$help_var_list$help_fnc_list" ]
    then
      if var_exists "$usage_var"
      then
        echo "  usage: $1 [--] ${!usage_var}"
      else
        echo "  usage: $1 [--]"
      fi
      echo
      return
    else
      var_exists "$usage_var" && echo "  usage: $1 [options] [--] ${!usage_var}" && echo
    fi

    # print options
    echo '  options:'
    echo "    most options can be negated by preprending 'no-' to them: --no-xyz-abc instead of --xyz-abc=false"
    echo
    echo

    # loop over variables
    for var in $help_var_list
    do
      optname="${var:8}"
      optname="${optname//_/-}"
      optname="${optname:${#1}}"
      optname="${optname:1}"
      echo -n "  --${optname} (current value: '${!var}' )"
      help_var="help_$var"
      var_exists "$help_var" && echo -e ":\n    ${!help_var}" || echo
      echo
    done

    # loop over functions
    for fnc in $help_fnc_list
    do
      echo -n "  --${fnc:8}"
      help_var="help_$fnc"
      var_exists "$help_var" && echo -e ":\n    ${!help_var}" || echo
      echo
    done
}



##
##  PRIG OPTIONS
##
## prig format for options is:
## prig [prig gbl opts] command-word [command word opts]
##
## internally, options can either be functions or variables
##



help_gbl_opt_help="Print this message and exit"
function gbl_opt_help # ()
{
  echo 'options:'
  echo "  most options can be negated by preprending 'no-' to them: --no-xyz-abc instead of --xyz-abc=false"
  echo
  echo

  # loop over variables
  help_var_list="${!gbl_opt_@}"
  for var in $help_var_list
  do
    optname="${var:8}"
    optname="${optname//_/-}"
    echo -n "  --${optname} (current value: '${!var}' )"
    help_var="help_$var"
    var_exists "$help_var" && echo -e ":\n    ${!help_var}" || echo
    echo
  done

  # loop over functions
  help_fnc_list="$(compgen -A function 'gbl_opt_')"
  for fnc in $help_fnc_list
  do
    optname="${fnc:8}"
    optname="${optname//_/-}"
    echo -n "  --${optname}"
    help_var="help_$fnc"
    var_exists "$help_var" && echo -e ":\n    ${!help_var}" || echo
    echo
  done

  # exit
  exit
}

help_gbl_opt_load_config="Load additional configuration files. Can be repeated as much as needed."
function gbl_opt_load_config # (file)
{
  debug_log "loading config file '$1'..."
  [ ! -f "$1" ] && die 10 "load-config: cannot find config file '$1'"
  . "$1"
}

# global option parsing core
while (( $# > 0 )) && [ "${1:0:2}" = "--" ]
do
  option="${1#--}"
  option_value="${option#*=}"
  [ -z "$(grep <<<"$option" = )" ] && option_value=true
  option="${option%%=*}"
  option="${option//-/_}"
  [ "${option:0:3}" = "no_" ] &&
  {
    option_value=false
    option="${option#no_}"
  }

  has "gbl_opt_$option" && option_is_command=true || option_is_command=false
  var_exists "gbl_opt_$option" && option_is_var=true || option_is_var=false

  $option_is_var || $option_is_command || [ "$gbl_opt_skip_unknown" = true ] || die 3 "unknown option: $1"

  debug_log "gbl_opt_${option} => $option_value"

  $option_is_var && declare -g gbl_opt_${option}="$option_value"
  $option_is_command && gbl_opt_${option} "$option_value"

  shift
done

function run_command # (cmd, opts...?)
{
  (( $# == 0 )) && die 4 "no command provided..."

  # save the command verb and shift
  command_verb="${1//-/_}"
  shift

  debug_log 'command verb:' $command_verb

  # check that the command exists
  if ! has prig_cmd_"$command_verb"
  then
    debug_log "searching for $command_verb in 'external' commands..."
    cmd_is_external=true
    cmd_opt_path="$gbl_opt_prig_command_dir/cmd/cmd_opt_$command_verb"
    cmd_script_path="$gbl_opt_prig_command_dir/cmd/cmd_$command_verb"

    if [ -e "$cmd_opt_path" ] && [ -e "$cmd_script_path" ]
    then
      debug_log "options for $command_verb have been located in $cmd_opt_path"
      debug_log "code for $command_verb have been located in $cmd_script_path"
    else
      die 5 "$command_verb: command verb does not exists. (has the folder been init / fixed / created with prig create or prig init or prig fix ?)"
    fi
  else
    cmd_is_external=false
  fi

  # command verb option parsing core
  while (( $# > 0 )) && [ "${1:0:2}" = "--" ] && [ "$1" != '--' ]
  do
    option="${1#--}"
    option_value="${option#*=}"
    [ -z "$(grep <<<"$option" = )" ] && option_value=true
    option="${option%%=*}"
    option="${option//-/_}"
    [ "${option:0:3}" = "no_" ] &&
    {
      option_value=false
      option="${option#no_}"
    }

    has "cmd_opt_${command_verb}_$option" && option_is_command=true || option_is_command=false
    var_exists "cmd_opt_${command_verb}_$option" && option_is_var=true || option_is_var=false

    $option_is_var || $option_is_command || [ "$gbl_opt_skip_unknown" = true ] || die 3 "unknown ${command_verb} option: $1"

    debug_log "cmd_opt_${command_verb}_${option} => $option_value"

    $option_is_var && declare -g cmd_opt_${command_verb}_${option}="$option_value"
    $option_is_command && cmd_opt_${command_verb}_${option} "$option_value"

    shift
  done

  # skip the -- terminator
  [ "$1" = '--' ] && shift

  debug_log "executing 'prig_cmd_$command_verb $@' ..."
  $cmd_is_external && . "$cmd_script_path"
  has prig_cmd_"$command_verb" || die 6 "$command_verb: malformed command verb script. Unable to run it. (missing entry point)"


  # call the command verb this is the last thing the prig core does
  prig_cmd_"$command_verb" "$@"
}

# clear the log file
[ "$gbl_opt_clear_logs" = "true" ] && echo >"$gbl_opt_log"

run_command "$@"
